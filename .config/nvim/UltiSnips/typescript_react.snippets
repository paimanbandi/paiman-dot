global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# console.log
priority 1
snippet cl "console.log(...)" i
console.log(${1});
endsnippet

# default
snippet dfc "default functional component" b
import React from 'react';
import {StyleSheet, View} from 'react-native';

const ${1:`!p snip.rv = snip.basename`} = (props: any) => {
	return (
		<View testID="${2:`!p snip.rv = snip.basename`}">

		</View>
	);
};

const styles = StyleSheet.create({

});

export default ${3:`!p snip.rv = snip.basename`};
endsnippet

# ==========================================
# Testing Library
# ==========================================

# describe and test
snippet dsr "Describe - Should render correctly" b
import React from 'react';
import ${1:`!p snip.rv = snip.basename`} from '../${2:`!p snip.rv = snip.basename`}';

import { render } from '@testing-library/react-native';

describe('${3:`!p snip.rv = snip.basename`}', () => {
	test('Should render correctly', () => {
		const wrapper = render(<${4:`!p snip.rv = snip.basename`} />);
		wrapper.getByTestId("${5:`!p snip.rv = snip.basename`}");
	});
});
endsnippet

# describe
snippet d "Describe" b
describe('${1:`!p snip.rv = snip.basename`}', () => {
	
});
endsnippet

# test
snippet t "Should render correctly" b
test('Should render correctly', () => {
	const wrapper = render(<${1:`!p snip.rv = snip.basename`} />);
	wrapper.getByTestId("${2:`!p snip.rv = snip.basename`}");
});
endsnippet

# ==========================================
# Hooks and effects
# ==========================================

# useState
snippet us "useState()" b
const [$1, set$4`!p snip.rv=upperfirst(t[1])`] = useState$3($2)$0
endsnippet

# useEffect
snippet ue "useEffect()" b
useEffect(() => {
	$0
}, [$1])
endsnippet

# useEffect async
snippet uea "useEffect() async" b
useEffect(() => {
	let cancelled = false

	;(async function ${4:doWork}(): Promise<${5:void}> {
		${1:// async work here}
		if (cancelled) {
			return
		}

		$2
	})()

	return () => {
		cancelled = true
	}
}, [$3])
endsnippet

# useContext 
snippet uc "useContext()" b
${5:const ${1:context} =} useContext$3($2)$0
endsnippet

